import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as signal
from sklearn.decomposition import FastICA
import os

def load_data_from_folder(folder_path, set_label):
    """
    Belirtilen klasÃ¶rdeki tÃ¼m .txt dosyalarÄ±nÄ± okuyup bir NumPy dizisi olarak dÃ¶ndÃ¼rÃ¼r.
    """
    file_names = sorted([f for f in os.listdir(folder_path) if f.startswith(set_label) and f.lower().endswith(('.txt', '.TXT'))])
    all_signals = []

    for file in file_names:
        file_path = os.path.join(folder_path, file)
        signal_data = np.loadtxt(file_path)  # .txt iÃ§indeki 4097 veriyi oku
        all_signals.append(signal_data)

    return np.array(all_signals) if all_signals else np.array([])  # BoÅŸsa boÅŸ bir array dÃ¶ndÃ¼r

def apply_notch_filter(signal_data, fs=256, notch_freq=50):
    """
    50 Hz elektriksel gÃ¼rÃ¼ltÃ¼yÃ¼ ortadan kaldÄ±rmak iÃ§in Notch filtresi uygular.
    """
    if len(signal_data) < 9:
        print("UYARI: Sinyal uzunluÄŸu 9'dan kÃ¼Ã§Ã¼k olduÄŸu iÃ§in Notch filtresi uygulanamÄ±yor.")
        return signal_data  # KÃ¼Ã§Ã¼k sinyalleri deÄŸiÅŸtirmeden geri dÃ¶ndÃ¼r
    
    Q = 30.0  # Kalite faktÃ¶rÃ¼
    b, a = signal.iirnotch(notch_freq, Q, fs)
    return signal.filtfilt(b, a, signal_data)

def apply_thresholding(signal_data, threshold=100):
    """
    Belirtilen eÅŸik deÄŸerinin Ã¼zerinde veya altÄ±nda olan anormal noktalarÄ± ortadan kaldÄ±rÄ±r.
    """
    return np.where(np.abs(signal_data) > threshold, np.median(signal_data), signal_data)

def apply_ica(signal_data, n_components=1):
    """
    BaÄŸÄ±msÄ±z BileÅŸen Analizi (ICA) ile gÃ¶z kÄ±rpma gibi artefaktlarÄ± temizler.
    """
    if signal_data.shape[0] < 2:
        print("UYARI: ICA uygulanamadÄ± Ã§Ã¼nkÃ¼ sinyal yeterince uzun deÄŸil.")
        return signal_data.flatten()  # Orijinal sinyali deÄŸiÅŸtirmeden dÃ¶ndÃ¼r

    ica = FastICA(n_components=n_components, random_state=42)
    return ica.fit_transform(signal_data)

def process_and_plot_all(folder_path, set_label):
    """
    TÃ¼m dosyalarÄ± okuyup, ham ve temizlenmiÅŸ sinyalleri tek bir grafikte Ã§izer.
    """
    raw_signals = load_data_from_folder(folder_path, set_label)

    if raw_signals.size == 0:
        print(f"HATA: '{folder_path}' klasÃ¶rÃ¼nde '{set_label}' ile baÅŸlayan dosya bulunamadÄ±!")
        return

    # TÃ¼m dosyalarÄ± birleÅŸtir (100 x 4097 â†’ 409700 noktaya dÃ¶nÃ¼ÅŸtÃ¼r)
    raw_signal = raw_signals.flatten()

    # Notch filtresi uygula
    filtered_signal = apply_notch_filter(raw_signal)

    # Thresholding uygula
    thresholded_signal = apply_thresholding(filtered_signal)

    # ICA uygula (Ã–nce uygunluk kontrolÃ¼ yapÄ±ldÄ±)
    cleaned_signal = apply_ica(thresholded_signal.reshape(-1, 1)).flatten()

    # Grafik Ã§iz
    plt.figure(figsize=(20, 6))  # GeniÅŸliÄŸi artÄ±rdÄ±k
    plt.plot(raw_signal, label="Ã–ncesi (Ham Sinyal)", alpha=0.5)
    plt.plot(cleaned_signal, label="SonrasÄ± (TemizlenmiÅŸ Sinyal)", color="red", alpha=0.7)
    plt.legend()
    plt.title(f"{set_label} Ä°Ã§in Artefakt Temizleme Ã–ncesi ve SonrasÄ± (TÃ¼m Dosyalar)")
    plt.xlabel("Zaman (Ã–rnek NoktalarÄ±)")
    plt.ylabel("Genlik (ÂµV)")
    plt.show()

# ğŸ“Œ Ã‡alÄ±ÅŸtÄ±rmak iÃ§in:
process_and_plot_all("N", "N")
